-- REMOVER TABELAS

DROP TABLE CLIENTE CASCADE CONSTRAINTS;
DROP TABLE TIPO_CLIENTE CASCADE CONSTRAINTS;
DROP TABLE GENERO CASCADE CONSTRAINTS;
DROP TABLE ENDERECO_CLIENTE CASCADE CONSTRAINTS;
DROP TABLE BAIRRO CASCADE CONSTRAINTS;
DROP TABLE CIDADE CASCADE CONSTRAINTS;
DROP TABLE ESTADO CASCADE CONSTRAINTS;
DROP TABLE PAIS CASCADE CONSTRAINTS;

DROP TABLE INFORMACOESPOLUICAO CASCADE CONSTRAINTS;



-- TABELA CLIENTE 

CREATE TABLE CLIENTE(
    ID_CLIENTE NUMBER(20) NOT NULL,
    NOME_CLIENTE VARCHAR2(100) NOT NULL,
    EMAIL VARCHAR2(100) NOT NULL, 
    CPF VARCHAR2(11) NOT NULL, -- Assumindo CPF como 11 dígitos
    ID_TIPO_CLIENTE VARCHAR2(50), -- Exemplo com tamanho máximo de 50 caracteres
    ID_GENERO VARCHAR2(10), -- Exemplo com tamanho máximo de 10 caracteres
    ENDERECO VARCHAR2(255), -- Exemplo com tamanho máximo de 255 caracteres
    ID_ENDERECO NUMBER(20)
);

ALTER TABLE CLIENTE
ADD CONSTRAINT PK_CLIENTE PRIMARY KEY (ID_CLIENTE);

-- TABELA TIPO CLIENTE

CREATE TABLE TIPO_CLIENTE(
    ID_TIPO_CLIENTE NUMBER(20) NOT NULL,
    DESCRICAO VARCHAR2(100) NOT NULL
);

ALTER TABLE TIPO_CLIENTE
ADD CONSTRAINT PK_TIPO_CLIENTE PRIMARY KEY (ID_TIPO_CLIENTE);

-- TABELA GENERO

CREATE TABLE GENERO (
ID_GENERO NUMBER(20) NOT NULL,
DESCRICAO VARCHAR2(100) NOT NULL
);

ALTER TABLE GENERO
ADD CONSTRAINT PK_GENERO PRIMARY KEY (ID_GENERO);

-- TABELA ENEDERECO

CREATE TABLE ENDERECO_CLIENTE(
    ID_ENDERECO NUMBER(20) NOT NULL,
    LOGRADOURO VARCHAR2(200) NOT NULL,
    NUMERO NUMBER(20) NOT NULL,
    COMPLEMENTO VARCHAR2(100) NOT NULL,
    NOME_ENDERECO VARCHAR2(200) NOT NULL
);

ALTER TABLE ENDRECO_CLIENTE
ADD CONSTRAINT PK_GENERO PRIMARY KEY (ID_ENDERECO);

-- TABELA BAIRRO

CREATE TABLE BAIRRO(
ID_BAIRRO NUMBER(20) NOT NULL,
NOME_BAIRRO VARCHAR2(100) NOT NULL,
ID_ESTADO NUMBER(20)
);

ALTER TABLE BAIRRO
ADD CONSTRAINT PK_GENERO PRIMARY KEY (ID_BAIRRO);

-- TABELA CIDADE

CREATE TABLE CIDADE(
ID_CIDADE NUMBER(20) NOT NULL,
NOME_CIDADE VARCHAR2(100) NOT NULL,
ID_ESTADO NUMBER(20)
);

ALTER TABLE CIDADE
ADD CONSTRAINT PK_GENERO PRIMARY KEY (ID_CIDADE);

-- TABELA ESTADO

CREATE TABLE ESTADO(
ID_ESTADO NUMBER(20) NOT NULL,
NOME_ESTADO VARCHAR2(100) NOT NULL,
ID_PAIS NUMBER(20)
);

ALTER TABLE ESTADO
ADD CONSTRAINT PK_ESTADO PRIMARY KEY (ID_ESTADO)

-- TABELA PAIS

CREATE TABLE PAIS(
ID_PAIS NUMBER(20) NOT NULL,
NOME VARCHAR2(100) NOT NULL
);

ALTER TABLE PAIS
ADD CONSTRAINT PK_PAIS PRIMARY KEY (ID_PAIS)


-- ADICIONANDO FK's

ALTER TABLE CLIENTE
ADD CONSTRAINT FK_CLIENTE_TIPO_CLIENTE FOREIGN KEY (ID_TIPO_CLIENTE)
REFERENCES TIPO_CLIENTE(ID_TIPO_CLIENTE);

ALTER TABLE CLIENTE
ADD CONSTRAINT FK_CLIENTE_GENERO FOREIGN KEY (ID_GENERO)
REFERENCES GENERO(ID_GENERO);

ALTER TABLE CLIENTE
ADD CONSTRAINT FK_CLIENTE_ENDERECO FOREIGN KEY (ID_ENDERECO)
REFERENCES ENDERECO_CLIENTE(ID_ENDERECO);

ALTER TABLE BAIRRO
ADD CONSTRAINT FK_BAIRRO_ESTADO FOREIGN KEY (ID_ESTADO)
REFERENCES ESTADO(ID_ESTADO);

ALTER TABLE CIDADE
ADD CONSTRAINT FK_CIDADE_ESTADO FOREIGN KEY (ID_ESTADO)
REFERENCES ESTADO(ID_ESTADO);

ALTER TABLE ESTADO
ADD CONSTRAINT FK_ESTADO_PAIS FOREIGN KEY (ID_PAIS)
REFERENCES PAIS(ID_PAIS);


-- INSERTS

-- TABELA PAIS
INSERT INTO PAIS (ID_PAIS, NOME) VALUES (1, 'Brasil');
INSERT INTO PAIS (ID_PAIS, NOME) VALUES (2, 'Estados Unidos');
INSERT INTO PAIS (ID_PAIS, NOME) VALUES (3, 'Alemanha');
INSERT INTO PAIS (ID_PAIS, NOME) VALUES (4, 'Japão');
INSERT INTO PAIS (ID_PAIS, NOME) VALUES (5, 'França');

-- TABELA ESTADO
INSERT INTO ESTADO (ID_ESTADO, NOME_ESTADO, ID_PAIS) VALUES (1, 'São Paulo', 1);
INSERT INTO ESTADO (ID_ESTADO, NOME_ESTADO, ID_PAIS) VALUES (2, 'Rio de Janeiro', 1);
INSERT INTO ESTADO (ID_ESTADO, NOME_ESTADO, ID_PAIS) VALUES (3, 'California', 2);
INSERT INTO ESTADO (ID_ESTADO, NOME_ESTADO, ID_PAIS) VALUES (4, 'Baviera', 3);
INSERT INTO ESTADO (ID_ESTADO, NOME_ESTADO, ID_PAIS) VALUES (5, 'Tóquio', 4);

-- TABELA CIDADE
INSERT INTO CIDADE (ID_CIDADE, NOME_CIDADE, ID_ESTADO) VALUES (1, 'São Paulo', 1);
INSERT INTO CIDADE (ID_CIDADE, NOME_CIDADE, ID_ESTADO) VALUES (2, 'Rio de Janeiro', 2);
INSERT INTO CIDADE (ID_CIDADE, NOME_CIDADE, ID_ESTADO) VALUES (3, 'Los Angeles', 3);
INSERT INTO CIDADE (ID_CIDADE, NOME_CIDADE, ID_ESTADO) VALUES (4, 'Munique', 4);
INSERT INTO CIDADE (ID_CIDADE, NOME_CIDADE, ID_ESTADO) VALUES (5, 'Tóquio', 5);

-- TABELA BAIRRO
INSERT INTO BAIRRO (ID_BAIRRO, NOME_BAIRRO, ID_ESTADO) VALUES (1, 'Centro', 1);
INSERT INTO BAIRRO (ID_BAIRRO, NOME_BAIRRO, ID_ESTADO) VALUES (2, 'Copacabana', 2);
INSERT INTO BAIRRO (ID_BAIRRO, NOME_BAIRRO, ID_ESTADO) VALUES (3, 'Hollywood', 3);
INSERT INTO BAIRRO (ID_BAIRRO, NOME_BAIRRO, ID_ESTADO) VALUES (4, 'Maxvorstadt', 4);
INSERT INTO BAIRRO (ID_BAIRRO, NOME_BAIRRO, ID_ESTADO) VALUES (5, 'Shinjuku', 5);

-- TABELA ENDERECO CLIENTE
INSERT INTO ENDERECO_CLIENTE (ID_ENDERECO, LOGRADOURO, NUMERO, COMPLEMENTO, NOME_ENDERECO) VALUES (1, 'Rua das Flores', 123, 'Apto 45', 'Casa Amarela');
INSERT INTO ENDERECO_CLIENTE (ID_ENDERECO, LOGRADOURO, NUMERO, COMPLEMENTO, NOME_ENDERECO) VALUES (2, 'Avenida das Árvores', 456, 'Bloco B', 'Edifício Azul');
INSERT INTO ENDERECO_CLIENTE (ID_ENDERECO, LOGRADOURO, NUMERO, COMPLEMENTO, NOME_ENDERECO) VALUES (3, 'Sunset Boulevard', 789, 'Apto 101', 'Apartamento Moderno');
INSERT INTO ENDERECO_CLIENTE (ID_ENDERECO, LOGRADOURO, NUMERO, COMPLEMENTO, NOME_ENDERECO) VALUES (4, 'Ludwigstraße', 321, 'Casa 10', 'Moradia Antiga');
INSERT INTO ENDERECO_CLIENTE (ID_ENDERECO, LOGRADOURO, NUMERO, COMPLEMENTO, NOME_ENDERECO) VALUES (5, 'Shinjuku Dori', 654, 'Edifício Central', 'Escritório');

-- TIPO_CLIENTE
INSERT INTO TIPO_CLIENTE (ID_TIPO_CLIENTE, DESCRICAO) VALUES (1, 'PF - Pessoa Física');
INSERT INTO TIPO_CLIENTE (ID_TIPO_CLIENTE, DESCRICAO) VALUES (2, 'PJ - Pessoa Jurídica');
INSERT INTO TIPO_CLIENTE (ID_TIPO_CLIENTE, DESCRICAO) VALUES (3, 'ONG - Organização Não Governamental');
INSERT INTO TIPO_CLIENTE (ID_TIPO_CLIENTE, DESCRICAO) VALUES (4, 'MEI - Microempreendedor Individual');
INSERT INTO TIPO_CLIENTE (ID_TIPO_CLIENTE, DESCRICAO) VALUES (5, 'EIRELI - Empresa Individual de Responsabilidade Limitada');

-- GENERO
INSERT INTO GENERO (ID_GENERO, DESCRICAO) VALUES (1, 'Masculino');
INSERT INTO GENERO (ID_GENERO, DESCRICAO) VALUES (2, 'Feminino');
INSERT INTO GENERO (ID_GENERO, DESCRICAO) VALUES (3, 'Não Binário');
INSERT INTO GENERO (ID_GENERO, DESCRICAO) VALUES (4, 'Prefiro não informar');
INSERT INTO GENERO (ID_GENERO, DESCRICAO) VALUES (5, 'Outro');

INSERT INTO CLIENTE (ID_CLIENTE, NOME_CLIENTE, EMAIL, CPF, ID_TIPO_CLIENTE, ID_GENERO, ENDERECO, ID_ENDERECO) VALUES (1, 'João Silva', 'joao.silva@email.com', '12345678901', 1, 1, 'Rua das Flores, 123, Apto 45', 1);
INSERT INTO CLIENTE (ID_CLIENTE, NOME_CLIENTE, EMAIL, CPF, ID_TIPO_CLIENTE, ID_GENERO, ENDERECO, ID_ENDERECO) VALUES (2, 'Maria Oliveira', 'maria.oliveira@email.com', '23456789012', 2, 2, 'Avenida das Árvores, 456, Bloco B', 2);
INSERT INTO CLIENTE (ID_CLIENTE, NOME_CLIENTE, EMAIL, CPF, ID_TIPO_CLIENTE, ID_GENERO, ENDERECO, ID_ENDERECO) VALUES (3, 'Pedro Costa', 'pedro.costa@email.com', '34567890123', 3, 3, 'Sunset Boulevard, 789, Apto 101', 3);
INSERT INTO CLIENTE (ID_CLIENTE, NOME_CLIENTE, EMAIL, CPF, ID_TIPO_CLIENTE, ID_GENERO, ENDERECO, ID_ENDERECO) VALUES (4, 'Ana Souza', 'ana.souza@email.com', '45678901234', 4, 4, 'Ludwigstraße, 321, Casa 10', 4);
INSERT INTO CLIENTE (ID_CLIENTE, NOME_CLIENTE, EMAIL, CPF, ID_TIPO_CLIENTE, ID_GENERO, ENDERECO, ID_ENDERECO) VALUES (5, 'Carlos Santos', 'carlos.santos@email.com', '56789012345', 5, 5, 'Shinjuku Dori, 654, Edifício Central', 5);


-- Pegando todos os endereco dos clientes com os seus nomes

select  
    a.cod_cliente Codigo,
    b.nom_cliente Nome
from 
    PF1788.endereco_cliente a
inner join 
    PF1788.cliente b
on ( a.cod_cliente = b.cod_cliente );

-- Pegando somente nomes distintos
-- DISTINCT Tem um desempenho pois ele smp vai ler a tabela inteira

select DISTINCT
    b.nom_cliente Nome
from 
    PF1788.endereco_cliente a
inner join 
    PF1788.cliente b
on ( a.cod_cliente = b.cod_cliente )
ORDER BY 1;

-- Pegando somente nomes distintos com group by

select 
    COUNT(1),
    b.nom_cliente Nome
from 
    PF1788.endereco_cliente a
inner join 
    PF1788.cliente b
on ( a.cod_cliente = b.cod_cliente )
GROUP BY b.nom_cliente
HAVING COUNT(1) >= 3 -- Mesma ideia que o where porém depois do group by
ORDER BY 1;
